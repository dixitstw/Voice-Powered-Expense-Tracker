[{"/home/dipti/Codes/Expense Tracker/Frontend/src/index.js":"1","/home/dipti/Codes/Expense Tracker/Frontend/src/App.js":"2","/home/dipti/Codes/Expense Tracker/Frontend/src/context/context.js":"3","/home/dipti/Codes/Expense Tracker/Frontend/src/styles.js":"4","/home/dipti/Codes/Expense Tracker/Frontend/src/context/contextReducer.js":"5","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/Details.jsx":"6","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Main.jsx":"7","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/styles.js":"8","/home/dipti/Codes/Expense Tracker/Frontend/src/useTransactions.js":"9","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/styles.js":"10","/home/dipti/Codes/Expense Tracker/Frontend/src/Infocard.jsx":"11","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/Form.jsx":"12","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/List.jsx":"13","/home/dipti/Codes/Expense Tracker/Frontend/src/constants/categories.js":"14","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/styles.js":"15","/home/dipti/Codes/Expense Tracker/Frontend/src/hooks/useSpeechRecognition.js":"16","/home/dipti/Codes/Expense Tracker/Frontend/src/utils/formatDate.js":"17","/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/Snackbar.jsx":"18","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/styles.js":"19","/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/styles.js":"20","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/Auth.js":"21","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/styles.js":"22"},{"size":250,"mtime":1731130218310,"results":"23","hashOfConfig":"24"},{"size":2474,"mtime":1732472594513,"results":"25","hashOfConfig":"24"},{"size":3022,"mtime":1732472219595,"results":"26","hashOfConfig":"24"},{"size":551,"mtime":1726738808884,"results":"27","hashOfConfig":"24"},{"size":752,"mtime":1731659458466,"results":"28","hashOfConfig":"24"},{"size":697,"mtime":1731652424261,"results":"29","hashOfConfig":"24"},{"size":1098,"mtime":1731595613674,"results":"30","hashOfConfig":"24"},{"size":241,"mtime":1726569597823,"results":"31","hashOfConfig":"24"},{"size":1157,"mtime":1731043151997,"results":"32","hashOfConfig":"24"},{"size":489,"mtime":1726739850437,"results":"33","hashOfConfig":"24"},{"size":432,"mtime":1731141984518,"results":"34","hashOfConfig":"24"},{"size":5135,"mtime":1732472651864,"results":"35","hashOfConfig":"24"},{"size":1673,"mtime":1731663146595,"results":"36","hashOfConfig":"24"},{"size":1660,"mtime":1731489745563,"results":"37","hashOfConfig":"24"},{"size":398,"mtime":1726828545700,"results":"38","hashOfConfig":"24"},{"size":6327,"mtime":1731491336047,"results":"39","hashOfConfig":"24"},{"size":362,"mtime":1730719041553,"results":"40","hashOfConfig":"24"},{"size":841,"mtime":1731137303156,"results":"41","hashOfConfig":"24"},{"size":1638,"mtime":1731477350546,"results":"42","hashOfConfig":"24"},{"size":195,"mtime":1731133449107,"results":"43","hashOfConfig":"24"},{"size":7105,"mtime":1732472557341,"results":"44","hashOfConfig":"24"},{"size":409,"mtime":1731518123617,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"7fznmu",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"/home/dipti/Codes/Expense Tracker/Frontend/src/index.js",[],["94","95"],"/home/dipti/Codes/Expense Tracker/Frontend/src/App.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/context/context.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/context/contextReducer.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/Details.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Main.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/useTransactions.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/Infocard.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/Form.jsx",["96"],"// src/components/Main/Form/Form.jsx\nimport React, { useState, useContext, useEffect } from 'react';\nimport { \n  TextField, \n  Typography, \n  Grid, \n  Button, \n  FormControl, \n  InputLabel, \n  Select, \n  MenuItem,\n  IconButton,\n  Collapse,\n  Paper\n} from '@material-ui/core';\nimport { Mic, MicOff } from '@material-ui/icons';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\nimport useStyles from './styles';\nimport formatDate from '../../../utils/formatDate';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport CustomizedSnackbar from '../../../Snackbar/Snackbar';\nimport useSpeechRecognition from '../../../hooks/useSpeechRecognition';\n\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date())\n};\n\nconst Form = () => {\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const { addTransaction } = useContext(ExpenseTrackerContext);\n  const [open, setOpen] = useState(false);\n  const [showTranscript, setShowTranscript] = useState(false);\n  \n  const {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    hasRecognitionSupport\n  } = useSpeechRecognition(formData, setFormData);\n\n  const createTransaction = async () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n  \n    const transaction = {\n      ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4()\n    };\n  \n    try {\n      await addTransaction(transaction); \n      setOpen(true);           \n      setFormData(initialState); \n      setShowTranscript(false);          \n    } catch (error) {\n      console.error('Failed to create transaction:', error);\n    }\n  };\n  \n\n  useEffect(() => {\n    if (transcript) {\n      setShowTranscript(true);\n      const timer = setTimeout(() => {\n        if (formData.amount && formData.category) {\n          createTransaction();\n        }\n      }, 2000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [transcript, formData]);\n\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n\n  const handleVoiceCommand = () => {\n    if (isListening) {\n      stopListening();\n    } else {\n      startListening();\n    }\n  };\n\n  return (\n    <Grid container spacing={2}>\n      <CustomizedSnackbar open={open} setOpen={setOpen} />\n      \n      <Grid item xs={12}>\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\n          {hasRecognitionSupport \n            ? \"\" \n            : \"Voice recognition is not supported in your browser\"}\n        </Typography>\n      </Grid>\n\n      {/* Voice Command Transcript */}\n      <Grid item xs={12}>\n        <Collapse in={showTranscript && !!transcript}>\n          <Paper className={classes.transcriptPaper}>\n            <Typography component = \"div\" style={{ fontWeight: 800, color: '#386641', fontFamily: 'Merriweather, serif', lineHeight: 1.6}}>\n              Recognized: {transcript}\n            </Typography>\n          </Paper>\n        </Collapse>\n      </Grid>\n\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Type</InputLabel>\n          <Select \n            value={formData.type} \n            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n          >\n            <MenuItem value=\"Income\">Income</MenuItem>\n            <MenuItem value=\"Expense\">Expense</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Category</InputLabel>\n          <Select \n            value={formData.category} \n            onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n          >\n            {selectedCategories.map((c) => (\n              <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={6}>\n        <TextField \n          type=\"number\" \n          label=\"Amount\" \n          fullWidth \n          value={formData.amount} \n          onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\n        />\n      </Grid>\n\n      <Grid item xs={6}>\n        <TextField \n          type=\"date\" \n          label=\"Date\" \n          fullWidth \n          value={formData.date} \n          onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })}\n        />\n      </Grid>\n\n      <Grid item xs={12}>\n        <Button \n          className={classes.button} \n          variant=\"outlined\" \n          color=\"primary\" \n          fullWidth \n          onClick={createTransaction}\n        >\n          Create\n        </Button>\n      </Grid>\n\n      {hasRecognitionSupport && (\n        <Grid item xs={12}>\n          <IconButton \n            color={isListening ? \"secondary\" : \"primary\"}\n            onClick={handleVoiceCommand}\n            className={classes.voiceButton}\n          >\n            {isListening ? <MicOff /> : <Mic />}\n          </IconButton>\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default Form;\n","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/List.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/constants/categories.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/hooks/useSpeechRecognition.js",["97"],"import { useState, useEffect, useCallback } from 'react';\nimport formatDate from '../utils/formatDate';\n\nconst useSpeechRecognition = (formData, setFormData) => {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [recognition, setRecognition] = useState(null);\n\n  const VALID_INCOME_CATEGORIES = [\n    'Business',\n    'Investments',\n    'Extra Income',\n    'Deposits',\n    'Lottery',\n    'Gifts',\n    'Salary',\n    'Savings',\n    'Rental Income'\n  ];\n\n  const VALID_EXPENSE_CATEGORIES = [\n    'Bills',\n    'Car',\n    'Clothes',\n    'Travel',\n    'Food',\n    'Shopping',\n    'House',\n    'Entertainment',\n    'Phone',\n    'Pets',\n    'Other'\n  ];\n\n  useEffect(() => {\n    if (window.SpeechRecognition || window.webkitSpeechRecognition) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognitionInstance = new SpeechRecognition();\n      \n      recognitionInstance.continuous = false;\n      recognitionInstance.interimResults = true;\n      recognitionInstance.lang = 'en-US';\n      \n      setRecognition(recognitionInstance);\n    }\n  }, []);\n\n  const validateCategory = (type, category) => {\n    const validCategories = type.toLowerCase() === 'income' \n      ? VALID_INCOME_CATEGORIES \n      : VALID_EXPENSE_CATEGORIES;\n\n    const formattedInputCategory = category\n      .trim()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n\n    return validCategories.includes(formattedInputCategory);\n  };\n\n  const parseCommand = useCallback((text) => {\n    const command = text.toLowerCase();\n    \n    // Updated pattern to better handle dates\n    const patterns = [\n        /(?:add|create|record)\\s+(income|expense)\\s+(?:for|of)\\s+(?:\\$?(\\d+)|(?:(?:dollars|dollar)\\s+(\\d+)|(\\d+)\\s+(?:dollars|dollar))|(?:(?:dollars|dollar)\\s+(\\d+)))\\s+(?:in|under)\\s+(?:category\\s+)?([a-zA-Z\\s]+?)(?:\\s+(?:for|on)\\s+(.+?))?(?:\\s*$)/i,\n    ];\n\n    let match = null;\n    for (const pattern of patterns) {\n      match = command.match(pattern);\n      if (match) break;\n    }\n\n    if (match) {\n      const [, type, amount1, amount2, amount3, amount4, category, date] = match;\n      const amount = amount1 || amount2 || amount3 || amount4;\n\n      if (!category || category.trim().toLowerCase() === 'category') {\n        console.log('No valid category provided');\n        return null;\n      }\n\n      const formattedCategory = category\n        .trim()\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n        .join(' ');\n\n      if (!validateCategory(type, formattedCategory)) {\n        console.log('Invalid category:', formattedCategory);\n        return null;\n      }\n      \n      // Process the date\n      let parsedDate;\n      if (date && date.trim()) {  // Added trim() check to ensure date isn't just whitespace\n        try {\n          const dateLower = date.toLowerCase().trim();\n          \n          if (dateLower === 'today') {\n            parsedDate = new Date();\n          } else if (dateLower === 'tomorrow') {\n            parsedDate = new Date();\n            parsedDate.setDate(parsedDate.getDate() + 1);\n          } else if (dateLower === 'yesterday') {\n            parsedDate = new Date();\n            parsedDate.setDate(parsedDate.getDate() - 1);\n          } else {\n            const daysOfWeek = {\n              'sunday': 0, 'monday': 1, 'tuesday': 2, 'wednesday': 3,\n              'thursday': 4, 'friday': 5, 'saturday': 6\n            };\n            \n            if (daysOfWeek.hasOwnProperty(dateLower)) {\n              parsedDate = new Date();\n              const currentDay = parsedDate.getDay();\n              const targetDay = daysOfWeek[dateLower];\n              const daysToAdd = (targetDay + 7 - currentDay) % 7;\n              parsedDate.setDate(parsedDate.getDate() + daysToAdd);\n            } else {\n              // Try parsing different date formats\n              const dateAttempts = [\n                // Try parsing as is\n                new Date(date),\n                // Try parsing with current year\n                new Date(`${date} ${new Date().getFullYear()}`),\n                // Try parsing American format (MM/DD)\n                new Date(`${date}/${new Date().getFullYear()}`),\n                // Try parsing European format (DD/MM)\n                new Date(date.split('/').reverse().join('/'))\n              ];\n\n              parsedDate = dateAttempts.find(d => !isNaN(d.getTime())) || new Date();\n              \n              // If the parsed date is valid but in a different year\n              if (!isNaN(parsedDate.getTime()) && \n                  !date.includes(parsedDate.getFullYear().toString()) && \n                  parsedDate.getFullYear() !== new Date().getFullYear()) {\n                parsedDate.setFullYear(new Date().getFullYear());\n              }\n            }\n          }\n        } catch (e) {\n          console.log('Date parsing error:', e);\n          parsedDate = new Date();\n        }\n      } else {\n        parsedDate = new Date();\n      }\n\n      return {\n        type: type.charAt(0).toUpperCase() + type.slice(1),\n        amount: amount,\n        category: formattedCategory,\n        date: formatDate(parsedDate)\n      };\n    }\n    \n    return null;\n  }, []);\n\n  const startListening = useCallback(() => {\n    if (recognition) {\n      recognition.start();\n      setIsListening(true);\n      \n      recognition.onresult = (event) => {\n        const text = event.results[0][0].transcript;\n        setTranscript(text);\n        \n        const parsedCommand = parseCommand(text);\n        if (parsedCommand) {\n          setFormData(parsedCommand);\n        }\n      };\n\n      recognition.onend = () => {\n        setIsListening(false);\n      };\n\n      recognition.onerror = (event) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n    }\n  }, [recognition, parseCommand, setFormData]);\n\n  const stopListening = useCallback(() => {\n    if (recognition) {\n      recognition.stop();\n      setIsListening(false);\n    }\n  }, [recognition]);\n\n  return {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    hasRecognitionSupport: !!recognition\n  };\n};\n\nexport default useSpeechRecognition;","/home/dipti/Codes/Expense Tracker/Frontend/src/utils/formatDate.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/Snackbar.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/Auth.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/styles.js",[],["98","99"],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":78,"column":6,"nodeType":"106","endLine":78,"endColumn":28,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":162,"column":6,"nodeType":"106","endLine":162,"endColumn":8,"suggestions":"109"},{"ruleId":"100","replacedBy":"110"},{"ruleId":"102","replacedBy":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createTransaction'. Either include it or remove the dependency array.","ArrayExpression",["114"],"React Hook useCallback has a missing dependency: 'validateCategory'. Either include it or remove the dependency array.",["115"],["112"],["113"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [transcript, formData, createTransaction]",{"range":"120","text":"121"},"Update the dependencies array to be: [validateCategory]",{"range":"122","text":"123"},[2065,2087],"[transcript, formData, createTransaction]",[5326,5328],"[validateCategory]"]