[{"/home/dipti/Codes/Expense Tracker/Frontend/src/index.js":"1","/home/dipti/Codes/Expense Tracker/Frontend/src/App.js":"2","/home/dipti/Codes/Expense Tracker/Frontend/src/context/context.js":"3","/home/dipti/Codes/Expense Tracker/Frontend/src/styles.js":"4","/home/dipti/Codes/Expense Tracker/Frontend/src/context/contextReducer.js":"5","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/Details.jsx":"6","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Main.jsx":"7","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/styles.js":"8","/home/dipti/Codes/Expense Tracker/Frontend/src/useTransactions.js":"9","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/styles.js":"10","/home/dipti/Codes/Expense Tracker/Frontend/src/Infocard.jsx":"11","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/Form.jsx":"12","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/List.jsx":"13","/home/dipti/Codes/Expense Tracker/Frontend/src/constants/categories.js":"14","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/styles.js":"15","/home/dipti/Codes/Expense Tracker/Frontend/src/hooks/useSpeechRecognition.js":"16","/home/dipti/Codes/Expense Tracker/Frontend/src/utils/formatDate.js":"17","/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/Snackbar.jsx":"18","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/styles.js":"19","/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/styles.js":"20","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/Auth.js":"21","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/styles.js":"22","/home/dipti/Codes/Expense Tracker/Frontend/src/components/BudgetTracker/BudgetTracker.js":"23","/home/dipti/Codes/Expense Tracker/Frontend/src/components/BudgetTracker/styles.js":"24","/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialInsights/FinancialInsights.js":"25","/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialInsights/styles.js":"26","/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialChallenge/FinancialChallenge.js":"27","/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialChallenge/styles.js":"28","/home/dipti/Codes/Expense Tracker/Frontend/src/components/TransactionsTable/TransactionsTable.jsx":"29"},{"size":250,"mtime":1731130218310,"results":"30","hashOfConfig":"31"},{"size":4224,"mtime":1733589980687,"results":"32","hashOfConfig":"31"},{"size":3022,"mtime":1732906073020,"results":"33","hashOfConfig":"31"},{"size":551,"mtime":1726738808884,"results":"34","hashOfConfig":"31"},{"size":752,"mtime":1731659458466,"results":"35","hashOfConfig":"31"},{"size":697,"mtime":1731652424261,"results":"36","hashOfConfig":"31"},{"size":1098,"mtime":1731595613674,"results":"37","hashOfConfig":"31"},{"size":241,"mtime":1726569597823,"results":"38","hashOfConfig":"31"},{"size":1157,"mtime":1731043151997,"results":"39","hashOfConfig":"31"},{"size":489,"mtime":1733576069059,"results":"40","hashOfConfig":"31"},{"size":432,"mtime":1731141984518,"results":"41","hashOfConfig":"31"},{"size":5135,"mtime":1733555462049,"results":"42","hashOfConfig":"31"},{"size":1673,"mtime":1732906064080,"results":"43","hashOfConfig":"31"},{"size":1660,"mtime":1731489745563,"results":"44","hashOfConfig":"31"},{"size":398,"mtime":1726828545700,"results":"45","hashOfConfig":"31"},{"size":6327,"mtime":1733555471940,"results":"46","hashOfConfig":"31"},{"size":362,"mtime":1730719041553,"results":"47","hashOfConfig":"31"},{"size":841,"mtime":1731137303156,"results":"48","hashOfConfig":"31"},{"size":1638,"mtime":1731477350546,"results":"49","hashOfConfig":"31"},{"size":195,"mtime":1731133449107,"results":"50","hashOfConfig":"31"},{"size":7105,"mtime":1732472557341,"results":"51","hashOfConfig":"31"},{"size":409,"mtime":1731518123617,"results":"52","hashOfConfig":"31"},{"size":5137,"mtime":1733573415558,"results":"53","hashOfConfig":"31"},{"size":1644,"mtime":1732774676237,"results":"54","hashOfConfig":"31"},{"size":6863,"mtime":1732788045298,"results":"55","hashOfConfig":"31"},{"size":4146,"mtime":1732787765916,"results":"56","hashOfConfig":"31"},{"size":6745,"mtime":1733574732621,"results":"57","hashOfConfig":"31"},{"size":1729,"mtime":1733569262528,"results":"58","hashOfConfig":"31"},{"size":7644,"mtime":1733593051556,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"7fznmu",{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dipti/Codes/Expense Tracker/Frontend/src/index.js",[],["123","124"],"/home/dipti/Codes/Expense Tracker/Frontend/src/App.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/context/context.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/context/contextReducer.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/Details.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Main.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/useTransactions.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/Infocard.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/Form.jsx",["125"],"// src/components/Main/Form/Form.jsx\nimport React, { useState, useContext, useEffect } from 'react';\nimport { \n  TextField, \n  Typography, \n  Grid, \n  Button, \n  FormControl, \n  InputLabel, \n  Select, \n  MenuItem,\n  IconButton,\n  Collapse,\n  Paper\n} from '@material-ui/core';\nimport { Mic, MicOff } from '@material-ui/icons';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\nimport useStyles from './styles';\nimport formatDate from '../../../utils/formatDate';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport CustomizedSnackbar from '../../../Snackbar/Snackbar';\nimport useSpeechRecognition from '../../../hooks/useSpeechRecognition';\n\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date())\n};\n\nconst Form = () => {\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const { addTransaction } = useContext(ExpenseTrackerContext);\n  const [open, setOpen] = useState(false);\n  const [showTranscript, setShowTranscript] = useState(false);\n  \n  const {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    hasRecognitionSupport\n  } = useSpeechRecognition(formData, setFormData);\n\n  const createTransaction = async () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n  \n    const transaction = {\n      ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4()\n    };\n  \n    try {\n      await addTransaction(transaction); \n      setOpen(true);           \n      setFormData(initialState); \n      setShowTranscript(false);          \n    } catch (error) {\n      console.error('Failed to create transaction:', error);\n    }\n  };\n  \n\n  useEffect(() => {\n    if (transcript) {\n      setShowTranscript(true);\n      const timer = setTimeout(() => {\n        if (formData.amount && formData.category) {\n          createTransaction();\n        }\n      }, 2000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [transcript, formData]);\n\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n\n  const handleVoiceCommand = () => {\n    if (isListening) {\n      stopListening();\n    } else {\n      startListening();\n    }\n  };\n\n  return (\n    <Grid container spacing={2}>\n      <CustomizedSnackbar open={open} setOpen={setOpen} />\n      \n      <Grid item xs={12}>\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\n          {hasRecognitionSupport \n            ? \"\" \n            : \"Voice recognition is not supported in your browser\"}\n        </Typography>\n      </Grid>\n\n      {/* Voice Command Transcript */}\n      <Grid item xs={12}>\n        <Collapse in={showTranscript && !!transcript}>\n          <Paper className={classes.transcriptPaper}>\n            <Typography component = \"div\" style={{ fontWeight: 800, color: '#386641', fontFamily: 'Merriweather, serif', lineHeight: 1.6}}>\n              Recognized: {transcript}\n            </Typography>\n          </Paper>\n        </Collapse>\n      </Grid>\n\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Type</InputLabel>\n          <Select \n            value={formData.type} \n            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n          >\n            <MenuItem value=\"Income\">Income</MenuItem>\n            <MenuItem value=\"Expense\">Expense</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Category</InputLabel>\n          <Select \n            value={formData.category} \n            onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n          >\n            {selectedCategories.map((c) => (\n              <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={6}>\n        <TextField \n          type=\"number\" \n          label=\"Amount\" \n          fullWidth \n          value={formData.amount} \n          onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\n        />\n      </Grid>\n\n      <Grid item xs={6}>\n        <TextField \n          type=\"date\" \n          label=\"Date\" \n          fullWidth \n          value={formData.date} \n          onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })}\n        />\n      </Grid>\n\n      <Grid item xs={12}>\n        <Button \n          className={classes.button} \n          variant=\"outlined\" \n          color=\"primary\" \n          fullWidth \n          onClick={createTransaction}\n        >\n          Create\n        </Button>\n      </Grid>\n\n      {hasRecognitionSupport && (\n        <Grid item xs={12}>\n          <IconButton \n            color={isListening ? \"secondary\" : \"primary\"}\n            onClick={handleVoiceCommand}\n            className={classes.voiceButton}\n          >\n            {isListening ? <MicOff /> : <Mic />}\n          </IconButton>\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default Form;\n","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/List.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/constants/categories.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/hooks/useSpeechRecognition.js",["126"],"import { useState, useEffect, useCallback } from 'react';\nimport formatDate from '../utils/formatDate';\n\nconst useSpeechRecognition = (formData, setFormData) => {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [recognition, setRecognition] = useState(null);\n\n  const VALID_INCOME_CATEGORIES = [\n    'Business',\n    'Investments',\n    'Extra Income',\n    'Deposits',\n    'Lottery',\n    'Gifts',\n    'Salary',\n    'Savings',\n    'Rental Income'\n  ];\n\n  const VALID_EXPENSE_CATEGORIES = [\n    'Bills',\n    'Car',\n    'Clothes',\n    'Travel',\n    'Food',\n    'Shopping',\n    'House',\n    'Entertainment',\n    'Phone',\n    'Pets',\n    'Other'\n  ];\n\n  useEffect(() => {\n    if (window.SpeechRecognition || window.webkitSpeechRecognition) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognitionInstance = new SpeechRecognition();\n      \n      recognitionInstance.continuous = false;\n      recognitionInstance.interimResults = true;\n      recognitionInstance.lang = 'en-US';\n      \n      setRecognition(recognitionInstance);\n    }\n  }, []);\n\n  const validateCategory = (type, category) => {\n    const validCategories = type.toLowerCase() === 'income' \n      ? VALID_INCOME_CATEGORIES \n      : VALID_EXPENSE_CATEGORIES;\n\n    const formattedInputCategory = category\n      .trim()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n\n    return validCategories.includes(formattedInputCategory);\n  };\n\n  const parseCommand = useCallback((text) => {\n    const command = text.toLowerCase();\n    \n    // Updated pattern to better handle dates\n    const patterns = [\n        /(?:add|create|record)\\s+(income|expense)\\s+(?:for|of)\\s+(?:\\$?(\\d+)|(?:(?:dollars|dollar)\\s+(\\d+)|(\\d+)\\s+(?:dollars|dollar))|(?:(?:dollars|dollar)\\s+(\\d+)))\\s+(?:in|under)\\s+(?:category\\s+)?([a-zA-Z\\s]+?)(?:\\s+(?:for|on)\\s+(.+?))?(?:\\s*$)/i,\n    ];\n\n    let match = null;\n    for (const pattern of patterns) {\n      match = command.match(pattern);\n      if (match) break;\n    }\n\n    if (match) {\n      const [, type, amount1, amount2, amount3, amount4, category, date] = match;\n      const amount = amount1 || amount2 || amount3 || amount4;\n\n      if (!category || category.trim().toLowerCase() === 'category') {\n        console.log('No valid category provided');\n        return null;\n      }\n\n      const formattedCategory = category\n        .trim()\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n        .join(' ');\n\n      if (!validateCategory(type, formattedCategory)) {\n        console.log('Invalid category:', formattedCategory);\n        return null;\n      }\n      \n      // Process the date\n      let parsedDate;\n      if (date && date.trim()) {  // Added trim() check to ensure date isn't just whitespace\n        try {\n          const dateLower = date.toLowerCase().trim();\n          \n          if (dateLower === 'today') {\n            parsedDate = new Date();\n          } else if (dateLower === 'tomorrow') {\n            parsedDate = new Date();\n            parsedDate.setDate(parsedDate.getDate() + 1);\n          } else if (dateLower === 'yesterday') {\n            parsedDate = new Date();\n            parsedDate.setDate(parsedDate.getDate() - 1);\n          } else {\n            const daysOfWeek = {\n              'sunday': 0, 'monday': 1, 'tuesday': 2, 'wednesday': 3,\n              'thursday': 4, 'friday': 5, 'saturday': 6\n            };\n            \n            if (daysOfWeek.hasOwnProperty(dateLower)) {\n              parsedDate = new Date();\n              const currentDay = parsedDate.getDay();\n              const targetDay = daysOfWeek[dateLower];\n              const daysToAdd = (targetDay + 7 - currentDay) % 7;\n              parsedDate.setDate(parsedDate.getDate() + daysToAdd);\n            } else {\n              // Try parsing different date formats\n              const dateAttempts = [\n                // Try parsing as is\n                new Date(date),\n                // Try parsing with current year\n                new Date(`${date} ${new Date().getFullYear()}`),\n                // Try parsing American format (MM/DD)\n                new Date(`${date}/${new Date().getFullYear()}`),\n                // Try parsing European format (DD/MM)\n                new Date(date.split('/').reverse().join('/'))\n              ];\n\n              parsedDate = dateAttempts.find(d => !isNaN(d.getTime())) || new Date();\n              \n              // If the parsed date is valid but in a different year\n              if (!isNaN(parsedDate.getTime()) && \n                  !date.includes(parsedDate.getFullYear().toString()) && \n                  parsedDate.getFullYear() !== new Date().getFullYear()) {\n                parsedDate.setFullYear(new Date().getFullYear());\n              }\n            }\n          }\n        } catch (e) {\n          console.log('Date parsing error:', e);\n          parsedDate = new Date();\n        }\n      } else {\n        parsedDate = new Date();\n      }\n\n      return {\n        type: type.charAt(0).toUpperCase() + type.slice(1),\n        amount: amount,\n        category: formattedCategory,\n        date: formatDate(parsedDate)\n      };\n    }\n    \n    return null;\n  }, []);\n\n  const startListening = useCallback(() => {\n    if (recognition) {\n      recognition.start();\n      setIsListening(true);\n      \n      recognition.onresult = (event) => {\n        const text = event.results[0][0].transcript;\n        setTranscript(text);\n        \n        const parsedCommand = parseCommand(text);\n        if (parsedCommand) {\n          setFormData(parsedCommand);\n        }\n      };\n\n      recognition.onend = () => {\n        setIsListening(false);\n      };\n\n      recognition.onerror = (event) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n    }\n  }, [recognition, parseCommand, setFormData]);\n\n  const stopListening = useCallback(() => {\n    if (recognition) {\n      recognition.stop();\n      setIsListening(false);\n    }\n  }, [recognition]);\n\n  return {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    hasRecognitionSupport: !!recognition\n  };\n};\n\nexport default useSpeechRecognition;","/home/dipti/Codes/Expense Tracker/Frontend/src/utils/formatDate.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/Snackbar.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/Auth.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/styles.js",[],["127","128"],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/BudgetTracker/BudgetTracker.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/BudgetTracker/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialInsights/FinancialInsights.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialInsights/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialChallenge/FinancialChallenge.js",["129"],"import React, { useState, useEffect, useContext } from 'react';\nimport { \n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Box,\n  TextField\n} from '@material-ui/core';\nimport { ExpenseTrackerContext } from '../../context/context';\nimport useStyles from './styles';\n\nconst DailyChallenge = () => {\n  const classes = useStyles();\n  const [currentChallenge, setCurrentChallenge] = useState(null);\n  const [challengeCompleted, setChallengeCompleted] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [rewardDialogOpen, setRewardDialogOpen] = useState(false);\n  const [totalChallengeRewards, setTotalChallengeRewards] = useState(0);\n  const [userDefinedReward, setUserDefinedReward] = useState(0);\n  const { addTransaction, transactions } = useContext(ExpenseTrackerContext);\n\n  const dailyChallenges = [\n    {\n      id: 1,\n      title: \"No Dining Out Challenge\",\n      description: \"Cook all meals at home today\",\n      category: \"Food\"\n    },\n    {\n      id: 2,\n      title: \"Transport Savings\",\n      description: \"Use public transport or walk today\",\n      category: \"Travel\"\n    },\n    {\n      id: 3,\n      title: \"Expense Freeze\",\n      description: \"Avoid any unnecessary expenses\",\n      category: \"Shopping\"\n    },\n    {\n      id: 4,\n      title: \"Utility Saver\",\n      description: \"Reduce electricity and water usage\",\n      category: \"Bills\"\n    }\n  ];\n\n  // Calculate total challenge rewards\n  useEffect(() => {\n    const challengeRewards = transactions\n      .filter(transaction => \n        transaction.category === 'Challenge Reward'\n      )\n      .reduce((total, transaction) => total + transaction.amount, 0);\n    \n    setTotalChallengeRewards(challengeRewards);\n  }, [transactions]);\n\n  useEffect(() => {\n    const storedChallenge = localStorage.getItem('dailyChallenge');\n    const storedDate = localStorage.getItem('challengeDate');\n    const today = new Date().toDateString();\n\n    if (storedChallenge && storedDate === today) {\n      setCurrentChallenge(JSON.parse(storedChallenge));\n    } else {\n      const randomChallenge = dailyChallenges[Math.floor(Math.random() * dailyChallenges.length)];\n      setCurrentChallenge(randomChallenge);\n      localStorage.setItem('dailyChallenge', JSON.stringify(randomChallenge));\n      localStorage.setItem('challengeDate', today);\n    }\n  }, []);\n\n  const handleOpenRewardDialog = () => {\n    setRewardDialogOpen(true);\n  };\n\n  const handleCloseRewardDialog = () => {\n    setRewardDialogOpen(false);\n  };\n\n  const handleSetReward = () => {\n    if (userDefinedReward > 0) {\n      handleCompleteChallenge(userDefinedReward);\n      handleCloseRewardDialog();\n    }\n  };\n\n  const handleCompleteChallenge = (reward) => {\n    if (currentChallenge) {\n      const rewardTransaction = {\n        type: 'Income',\n        category: 'Challenge Reward',\n        amount: reward,\n        date: new Date().toISOString().split('T')[0],\n        id: `challenge-${Date.now()}`\n      };\n\n      addTransaction(rewardTransaction);\n      setChallengeCompleted(true);\n      setDialogOpen(true);\n      localStorage.removeItem('dailyChallenge');\n      localStorage.removeItem('challengeDate');\n    }\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n  };\n\n  if (!currentChallenge) return null;\n\n  return (\n    <Card className={classes.challengeContainer}>\n      {/* Total Challenge Rewards Display */}\n      <Box \n        className={classes.totalRewardsContainer}\n        style={{\n          backgroundColor: '#3a5a40',\n          color: 'white',\n          padding: '4px',\n          textAlign: 'center',\n          borderRadius: '12px',\n          margin: '4px'\n        }}\n      >\n        <Typography variant=\"h8\">\n          Total Challenge Rewards\n        </Typography>\n        <Typography variant=\"h6\" style={{ fontWeight: 'bold' }}>\n          ${totalChallengeRewards.toFixed(2)}\n        </Typography>\n      </Box>\n\n      <div className={classes.challengeHeader}>\n        <Typography variant=\"h6\" className={classes.challengeTitle}>\n          Daily Financial Challenge\n        </Typography>\n        <Typography variant=\"body2\" className={classes.challengeDescription}>\n          Your daily opportunity to save and earn!\n        </Typography>\n      </div>\n      <CardContent className={classes.challengeContent}>\n        <Typography variant=\"h6\" color=\"textPrimary\">\n          {currentChallenge.title}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" gutterBottom>\n          {currentChallenge.description}\n        </Typography>\n        <Button \n          className={classes.completeButton}\n          onClick={handleOpenRewardDialog}\n          disabled={challengeCompleted}\n          fullWidth\n        >\n          Complete Challenge\n        </Button>\n      </CardContent>\n\n      {/* Reward Input Dialog */}\n      <Dialog \n        open={rewardDialogOpen} \n        onClose={handleCloseRewardDialog}\n      >\n        <DialogTitle>Set Your Challenge Reward</DialogTitle>\n        <DialogContent>\n          <Typography>\n            How much would you like to reward yourself for completing this challenge?\n          </Typography>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Reward Amount\"\n            type=\"number\"\n            fullWidth\n            value={userDefinedReward}\n            onChange={(e) => setUserDefinedReward(Number(e.target.value))}\n            inputProps={{ min: 0 }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseRewardDialog} color=\"primary\">\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSetReward} \n            color=\"primary\" \n            disabled={userDefinedReward <= 0}\n          >\n            Set Reward\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Challenge Completed Dialog */}\n      <Dialog \n        open={dialogOpen} \n        onClose={handleCloseDialog}\n        classes={{ paper: classes.completedDialog }}\n      >\n        <DialogTitle>Challenge Completed!</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Congratulations! You've earned ${userDefinedReward} for completing today's challenge.\n          </Typography>\n          <Typography style={{ marginTop: '10px' }}>\n            Total Challenge Rewards: ${totalChallengeRewards.toFixed(2)}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={handleCloseDialog} \n            className={classes.dialogCloseButton}\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Card>\n  );\n};\n\nexport default DailyChallenge;","/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialChallenge/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/TransactionsTable/TransactionsTable.jsx",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":78,"column":6,"nodeType":"136","endLine":78,"endColumn":28,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":162,"column":6,"nodeType":"136","endLine":162,"endColumn":8,"suggestions":"139"},{"ruleId":"130","replacedBy":"140"},{"ruleId":"132","replacedBy":"141"},{"ruleId":"134","severity":1,"message":"142","line":78,"column":6,"nodeType":"136","endLine":78,"endColumn":8,"suggestions":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createTransaction'. Either include it or remove the dependency array.","ArrayExpression",["146"],"React Hook useCallback has a missing dependency: 'validateCategory'. Either include it or remove the dependency array.",["147"],["144"],["145"],"React Hook useEffect has a missing dependency: 'dailyChallenges'. Either include it or remove the dependency array.",["148"],"no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},"Update the dependencies array to be: [transcript, formData, createTransaction]",{"range":"155","text":"156"},"Update the dependencies array to be: [validateCategory]",{"range":"157","text":"158"},"Update the dependencies array to be: [dailyChallenges]",{"range":"159","text":"160"},[2065,2087],"[transcript, formData, createTransaction]",[5326,5328],"[validateCategory]",[2390,2392],"[dailyChallenges]"]