[{"/home/dipti/Codes/Expense Tracker/Frontend/src/index.js":"1","/home/dipti/Codes/Expense Tracker/Frontend/src/App.js":"2","/home/dipti/Codes/Expense Tracker/Frontend/src/context/context.js":"3","/home/dipti/Codes/Expense Tracker/Frontend/src/styles.js":"4","/home/dipti/Codes/Expense Tracker/Frontend/src/context/contextReducer.js":"5","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/Details.jsx":"6","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Main.jsx":"7","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/styles.js":"8","/home/dipti/Codes/Expense Tracker/Frontend/src/useTransactions.js":"9","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/styles.js":"10","/home/dipti/Codes/Expense Tracker/Frontend/src/Infocard.jsx":"11","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/Form.jsx":"12","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/List.jsx":"13","/home/dipti/Codes/Expense Tracker/Frontend/src/constants/categories.js":"14","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/styles.js":"15","/home/dipti/Codes/Expense Tracker/Frontend/src/hooks/useSpeechRecognition.js":"16","/home/dipti/Codes/Expense Tracker/Frontend/src/utils/formatDate.js":"17","/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/Snackbar.jsx":"18","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/styles.js":"19","/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/styles.js":"20","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/Auth.js":"21","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/styles.js":"22","/home/dipti/Codes/Expense Tracker/Frontend/src/components/BudgetTracker/BudgetTracker.js":"23","/home/dipti/Codes/Expense Tracker/Frontend/src/components/BudgetTracker/styles.js":"24","/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialInsights/FinancialInsights.js":"25","/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialInsights/styles.js":"26","/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialChallenge/FinancialChallenge.js":"27","/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialChallenge/styles.js":"28","/home/dipti/Codes/Expense Tracker/Frontend/src/components/TransactionsTable/TransactionsTable.jsx":"29"},{"size":250,"mtime":1731130218310,"results":"30","hashOfConfig":"31"},{"size":9756,"mtime":1738655795876,"results":"32","hashOfConfig":"31"},{"size":3022,"mtime":1732906073020,"results":"33","hashOfConfig":"31"},{"size":551,"mtime":1738605064320,"results":"34","hashOfConfig":"31"},{"size":752,"mtime":1731659458466,"results":"35","hashOfConfig":"31"},{"size":697,"mtime":1731652424261,"results":"36","hashOfConfig":"31"},{"size":1949,"mtime":1738597466044,"results":"37","hashOfConfig":"31"},{"size":241,"mtime":1726569597823,"results":"38","hashOfConfig":"31"},{"size":1157,"mtime":1731043151997,"results":"39","hashOfConfig":"31"},{"size":1904,"mtime":1738605225287,"results":"40","hashOfConfig":"31"},{"size":432,"mtime":1731141984518,"results":"41","hashOfConfig":"31"},{"size":8226,"mtime":1738605022738,"results":"42","hashOfConfig":"31"},{"size":1673,"mtime":1738597350501,"results":"43","hashOfConfig":"31"},{"size":1660,"mtime":1731489745563,"results":"44","hashOfConfig":"31"},{"size":398,"mtime":1726828545700,"results":"45","hashOfConfig":"31"},{"size":6327,"mtime":1733555471940,"results":"46","hashOfConfig":"31"},{"size":362,"mtime":1730719041553,"results":"47","hashOfConfig":"31"},{"size":841,"mtime":1731137303156,"results":"48","hashOfConfig":"31"},{"size":1638,"mtime":1731477350546,"results":"49","hashOfConfig":"31"},{"size":195,"mtime":1731133449107,"results":"50","hashOfConfig":"31"},{"size":7105,"mtime":1732472557341,"results":"51","hashOfConfig":"31"},{"size":409,"mtime":1731518123617,"results":"52","hashOfConfig":"31"},{"size":5097,"mtime":1738609639336,"results":"53","hashOfConfig":"31"},{"size":1762,"mtime":1738609677137,"results":"54","hashOfConfig":"31"},{"size":6863,"mtime":1732788045298,"results":"55","hashOfConfig":"31"},{"size":4144,"mtime":1738606000375,"results":"56","hashOfConfig":"31"},{"size":8962,"mtime":1738655769995,"results":"57","hashOfConfig":"31"},{"size":2284,"mtime":1738610974077,"results":"58","hashOfConfig":"31"},{"size":7644,"mtime":1733593051556,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"7fznmu",{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/home/dipti/Codes/Expense Tracker/Frontend/src/index.js",[],["123","124"],"/home/dipti/Codes/Expense Tracker/Frontend/src/App.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/context/context.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/context/contextReducer.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/Details.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Main.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Details/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/useTransactions.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/Infocard.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/Form.jsx",["125"],"import React, { useState, useContext, useEffect } from 'react';\nimport { \n  TextField, \n  Typography, \n  Grid, \n  Button, \n  FormControl, \n  InputLabel, \n  Select, \n  MenuItem,\n  IconButton,\n  Collapse,\n  Paper\n} from '@material-ui/core';\nimport { Mic, MicOff } from '@material-ui/icons';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\nimport formatDate from '../../../utils/formatDate';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport CustomizedSnackbar from '../../../Snackbar/Snackbar';\nimport useSpeechRecognition from '../../../hooks/useSpeechRecognition';\n\n// Enhanced Styling\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: '#faedcd',\n    padding: theme.spacing(3),\n    borderRadius: '15px',\n    boxShadow: '0 10px 20px rgba(0,0,0,0.1)',\n    height: '50%',\n  },\n  formContainer: {\n    background: 'white',\n    borderRadius: '12px',\n    padding: theme.spacing(3),\n    boxShadow: '0 4px 6px rgba(0,0,0,0.1)',\n  },\n  selectInput: {\n    '& .MuiOutlinedInput-root': {\n      borderRadius: '12px',\n      '&:hover fieldset': {\n        borderColor: '#2a9d8f',\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: '#2a9d8f',\n      },\n    },\n  },\n  voiceButton: {\n    width: '20%',\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',    // Center align content vertically\n    marginTop: '10px',\n    margin: '10px auto',     // Center align the button horizontally\n    backgroundColor: '#ffffff',\n    borderRadius: '50%',\n    padding: '12px',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n    transition: 'all 0.3s ease',\n    '& svg': {\n      fontSize: '35px',\n      color: '#000000',\n      transition: 'all 0.3s ease',\n    },\n    '&:hover': {\n      color: 'white',\n      backgroundColor: '#353535',\n      boxShadow: '0 4px 8px rgba(0,0,0,0.15)',\n      transform: 'translateY(-2px)',\n      '& svg': {\n        transform: 'scale(1.1)',\n        color: 'white', \n      },\n    },\n  },\n  createButton: {\n    background: 'green',\n    color: 'white',\n    borderRadius: '12px',\n    padding: theme.spacing(1.5),\n    fontWeight: 'bold',\n    fontSize: '1rem',\n    letterSpacing: '2px',\n    fontFamily: 'Merriweather',\n    transition: 'all 0.3s ease',\n    '&:hover': {\n      background: '#283618',\n      transform: 'translateY(-3px)',\n      boxShadow: '0 4px 6px rgba(0,0,0,0.2)',\n    },\n  },\n  transcriptPaper: {\n    background: '#f0f4f8',\n    padding: theme.spacing(2),\n    borderRadius: '12px',\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date())\n};\n\nconst Form = () => {\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const { addTransaction } = useContext(ExpenseTrackerContext);\n  const [open, setOpen] = useState(false);\n  const [showTranscript, setShowTranscript] = useState(false);\n  \n  const {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    hasRecognitionSupport\n  } = useSpeechRecognition(formData, setFormData);\n\n  const createTransaction = async () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n  \n    const transaction = {\n      ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4()\n    };\n  \n    try {\n      await addTransaction(transaction); \n      setOpen(true);           \n      setFormData(initialState); \n      setShowTranscript(false);          \n    } catch (error) {\n      console.error('Failed to create transaction:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (transcript) {\n      setShowTranscript(true);\n      const timer = setTimeout(() => {\n        if (formData.amount && formData.category) {\n          createTransaction();\n        }\n      }, 2000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [transcript, formData]);\n\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n\n  const handleVoiceCommand = () => {\n    if (isListening) {\n      stopListening();\n    } else {\n      startListening();\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3} className={classes.formContainer}>\n        <CustomizedSnackbar open={open} setOpen={setOpen} />\n        \n        {/* Voice Recognition Support Message */}\n        {!hasRecognitionSupport && (\n          <Grid item xs={12}>\n            <Typography \n              align=\"center\" \n              variant=\"subtitle2\" \n              color=\"error\"\n              gutterBottom\n            >\n              Voice recognition is not supported in your browser\n            </Typography>\n          </Grid>\n        )}\n\n        {/* Voice Command Transcript */}\n        {showTranscript && transcript && (\n          <Grid item xs={12}>\n            <Collapse in={showTranscript && !!transcript}>\n              <Paper className={classes.transcriptPaper}>\n                <Typography \n                  component=\"div\" \n                  style={{ \n                    fontWeight: 800, \n                    color: '#386641', \n                    fontFamily: 'Merriweather, serif', \n                    lineHeight: 1.6\n                  }}\n                >\n                  Recognized: {transcript}\n                </Typography>\n              </Paper>\n            </Collapse>\n          </Grid>\n        )}\n\n        {/* Transaction Type Select */}\n        <Grid item xs={12} sm={6}>\n          <FormControl fullWidth variant=\"outlined\" className={classes.selectInput}>\n            <Select \n              value={formData.type} \n              onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n              label=\"Transaction Type\"\n            >\n              <MenuItem value=\"Income\">Income</MenuItem>\n              <MenuItem value=\"Expense\">Expense</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n\n        {/* Category Select */}\n        <Grid item xs={12} sm={6}>\n          <FormControl fullWidth variant=\"outlined\" className={classes.selectInput}>\n            <InputLabel>Category</InputLabel>\n            <Select \n              value={formData.category} \n              onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n              label=\"Category\"\n            >\n              {selectedCategories.map((c) => (\n                <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        {/* Amount Input */}\n        <Grid item xs={12} sm={6}>\n          <TextField \n            type=\"number\" \n            label=\"Amount\" \n            variant=\"outlined\"\n            fullWidth \n            value={formData.amount} \n            onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\n            className={classes.selectInput}\n          />\n        </Grid>\n\n        {/* Date Input */}\n        <Grid item xs={12} sm={6}>\n          <TextField \n            type=\"date\" \n            label=\"Date\" \n            variant=\"outlined\"\n            fullWidth \n            value={formData.date} \n            onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            className={classes.selectInput}\n          />\n        </Grid>\n\n        {/* Create Transaction Button */}\n        <Grid item xs={12}>\n          <Button \n            className={classes.createButton} \n            variant=\"contained\" \n            fullWidth \n            onClick={createTransaction}\n          >\n            Create Transaction\n          </Button>\n        </Grid>\n\n        {/* Voice Recognition Button */}\n        {hasRecognitionSupport && (\n          <Grid item xs={12} container justifyContent=\"center\">\n            <IconButton \n              onClick={handleVoiceCommand}\n              className={classes.voiceButton}\n            >\n              {isListening ? <MicOff /> : <Mic />}\n            </IconButton>\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n};\n\nexport default Form;","/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/List.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/constants/categories.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/List/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/hooks/useSpeechRecognition.js",["126"],"import { useState, useEffect, useCallback } from 'react';\nimport formatDate from '../utils/formatDate';\n\nconst useSpeechRecognition = (formData, setFormData) => {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [recognition, setRecognition] = useState(null);\n\n  const VALID_INCOME_CATEGORIES = [\n    'Business',\n    'Investments',\n    'Extra Income',\n    'Deposits',\n    'Lottery',\n    'Gifts',\n    'Salary',\n    'Savings',\n    'Rental Income'\n  ];\n\n  const VALID_EXPENSE_CATEGORIES = [\n    'Bills',\n    'Car',\n    'Clothes',\n    'Travel',\n    'Food',\n    'Shopping',\n    'House',\n    'Entertainment',\n    'Phone',\n    'Pets',\n    'Other'\n  ];\n\n  useEffect(() => {\n    if (window.SpeechRecognition || window.webkitSpeechRecognition) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognitionInstance = new SpeechRecognition();\n      \n      recognitionInstance.continuous = false;\n      recognitionInstance.interimResults = true;\n      recognitionInstance.lang = 'en-US';\n      \n      setRecognition(recognitionInstance);\n    }\n  }, []);\n\n  const validateCategory = (type, category) => {\n    const validCategories = type.toLowerCase() === 'income' \n      ? VALID_INCOME_CATEGORIES \n      : VALID_EXPENSE_CATEGORIES;\n\n    const formattedInputCategory = category\n      .trim()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n\n    return validCategories.includes(formattedInputCategory);\n  };\n\n  const parseCommand = useCallback((text) => {\n    const command = text.toLowerCase();\n    \n    // Updated pattern to better handle dates\n    const patterns = [\n        /(?:add|create|record)\\s+(income|expense)\\s+(?:for|of)\\s+(?:\\$?(\\d+)|(?:(?:dollars|dollar)\\s+(\\d+)|(\\d+)\\s+(?:dollars|dollar))|(?:(?:dollars|dollar)\\s+(\\d+)))\\s+(?:in|under)\\s+(?:category\\s+)?([a-zA-Z\\s]+?)(?:\\s+(?:for|on)\\s+(.+?))?(?:\\s*$)/i,\n    ];\n\n    let match = null;\n    for (const pattern of patterns) {\n      match = command.match(pattern);\n      if (match) break;\n    }\n\n    if (match) {\n      const [, type, amount1, amount2, amount3, amount4, category, date] = match;\n      const amount = amount1 || amount2 || amount3 || amount4;\n\n      if (!category || category.trim().toLowerCase() === 'category') {\n        console.log('No valid category provided');\n        return null;\n      }\n\n      const formattedCategory = category\n        .trim()\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n        .join(' ');\n\n      if (!validateCategory(type, formattedCategory)) {\n        console.log('Invalid category:', formattedCategory);\n        return null;\n      }\n      \n      // Process the date\n      let parsedDate;\n      if (date && date.trim()) {  // Added trim() check to ensure date isn't just whitespace\n        try {\n          const dateLower = date.toLowerCase().trim();\n          \n          if (dateLower === 'today') {\n            parsedDate = new Date();\n          } else if (dateLower === 'tomorrow') {\n            parsedDate = new Date();\n            parsedDate.setDate(parsedDate.getDate() + 1);\n          } else if (dateLower === 'yesterday') {\n            parsedDate = new Date();\n            parsedDate.setDate(parsedDate.getDate() - 1);\n          } else {\n            const daysOfWeek = {\n              'sunday': 0, 'monday': 1, 'tuesday': 2, 'wednesday': 3,\n              'thursday': 4, 'friday': 5, 'saturday': 6\n            };\n            \n            if (daysOfWeek.hasOwnProperty(dateLower)) {\n              parsedDate = new Date();\n              const currentDay = parsedDate.getDay();\n              const targetDay = daysOfWeek[dateLower];\n              const daysToAdd = (targetDay + 7 - currentDay) % 7;\n              parsedDate.setDate(parsedDate.getDate() + daysToAdd);\n            } else {\n              // Try parsing different date formats\n              const dateAttempts = [\n                // Try parsing as is\n                new Date(date),\n                // Try parsing with current year\n                new Date(`${date} ${new Date().getFullYear()}`),\n                // Try parsing American format (MM/DD)\n                new Date(`${date}/${new Date().getFullYear()}`),\n                // Try parsing European format (DD/MM)\n                new Date(date.split('/').reverse().join('/'))\n              ];\n\n              parsedDate = dateAttempts.find(d => !isNaN(d.getTime())) || new Date();\n              \n              // If the parsed date is valid but in a different year\n              if (!isNaN(parsedDate.getTime()) && \n                  !date.includes(parsedDate.getFullYear().toString()) && \n                  parsedDate.getFullYear() !== new Date().getFullYear()) {\n                parsedDate.setFullYear(new Date().getFullYear());\n              }\n            }\n          }\n        } catch (e) {\n          console.log('Date parsing error:', e);\n          parsedDate = new Date();\n        }\n      } else {\n        parsedDate = new Date();\n      }\n\n      return {\n        type: type.charAt(0).toUpperCase() + type.slice(1),\n        amount: amount,\n        category: formattedCategory,\n        date: formatDate(parsedDate)\n      };\n    }\n    \n    return null;\n  }, []);\n\n  const startListening = useCallback(() => {\n    if (recognition) {\n      recognition.start();\n      setIsListening(true);\n      \n      recognition.onresult = (event) => {\n        const text = event.results[0][0].transcript;\n        setTranscript(text);\n        \n        const parsedCommand = parseCommand(text);\n        if (parsedCommand) {\n          setFormData(parsedCommand);\n        }\n      };\n\n      recognition.onend = () => {\n        setIsListening(false);\n      };\n\n      recognition.onerror = (event) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n    }\n  }, [recognition, parseCommand, setFormData]);\n\n  const stopListening = useCallback(() => {\n    if (recognition) {\n      recognition.stop();\n      setIsListening(false);\n    }\n  }, [recognition]);\n\n  return {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    hasRecognitionSupport: !!recognition\n  };\n};\n\nexport default useSpeechRecognition;","/home/dipti/Codes/Expense Tracker/Frontend/src/utils/formatDate.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/Snackbar.jsx",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Main/Form/styles.js",[],["127","128"],"/home/dipti/Codes/Expense Tracker/Frontend/src/Snackbar/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/Auth.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/Auth/styles.js",[],["129","130"],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/BudgetTracker/BudgetTracker.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/BudgetTracker/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialInsights/FinancialInsights.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialInsights/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialChallenge/FinancialChallenge.js",["131","132"],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/FinancialChallenge/styles.js",[],"/home/dipti/Codes/Expense Tracker/Frontend/src/components/TransactionsTable/TransactionsTable.jsx",[],{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":155,"column":6,"nodeType":"139","endLine":155,"endColumn":28,"suggestions":"140"},{"ruleId":"137","severity":1,"message":"141","line":162,"column":6,"nodeType":"139","endLine":162,"endColumn":8,"suggestions":"142"},{"ruleId":"133","replacedBy":"143"},{"ruleId":"135","replacedBy":"144"},{"ruleId":"133","replacedBy":"145"},{"ruleId":"135","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":156,"column":11,"nodeType":"149","messageId":"150","endLine":156,"endColumn":27},{"ruleId":"147","severity":1,"message":"151","line":157,"column":11,"nodeType":"149","messageId":"150","endLine":157,"endColumn":27},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createTransaction'. Either include it or remove the dependency array.","ArrayExpression",["154"],"React Hook useCallback has a missing dependency: 'validateCategory'. Either include it or remove the dependency array.",["155"],["152"],["153"],["152"],["153"],"no-unused-vars","'todayCompletions' is assigned a value but never used.","Identifier","unusedVar","'totalCompletions' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [transcript, formData, createTransaction]",{"range":"160","text":"161"},"Update the dependencies array to be: [validateCategory]",{"range":"162","text":"163"},[3985,4007],"[transcript, formData, createTransaction]",[5326,5328],"[validateCategory]"]